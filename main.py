import os
import json
import asyncio
import logging
import re
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from aiogram import Bot, Dispatcher, types

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# -----------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")        # –ö–∞–Ω–∞–ª –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
ALERT_CHANNEL_ID = os.getenv("ALERT_CHANNEL_ID")  # –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GMAIL_USER = os.getenv("GMAIL_USER")        # –ü–æ—á—Ç–∞ –¥–ª—è Gmail API

# -----------------------------
# Google Sheets
# -----------------------------
creds_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
SCOPES_SHEETS = ["https://www.googleapis.com/auth/spreadsheets"]
credentials_sheets = Credentials.from_service_account_info(creds_dict, scopes=SCOPES_SHEETS)
gc = gspread.authorize(credentials_sheets)

main_sheet = gc.open_by_key(SPREADSHEET_ID).sheet1
try:
    utro_sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("Utro")
except gspread.WorksheetNotFound:
    utro_sheet = gc.open_by_key(SPREADSHEET_ID).add_worksheet(title="Utro", rows="100", cols="10")
    utro_sheet.append_row(["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–î–∞—Ç–∞", "–û–±—ä–µ–∫—Ç", "–°—Ç–∞—Ç—É—Å", "Checked", "–í—Ä–µ–º—è"])

# -----------------------------
# Gmail API
# -----------------------------
SCOPES_GMAIL = ['https://www.googleapis.com/auth/gmail.readonly']
credentials_gmail = Credentials.from_service_account_info(creds_dict, scopes=SCOPES_GMAIL).with_subject(GMAIL_USER)
gmail_service = build('gmail', 'v1', credentials=credentials_gmail)

# -----------------------------
# Telegram Bot
# -----------------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏
# -----------------------------
def parse_order_message(text):
    """–ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!'"""
    order_match = re.search(
        r"–ó–∞–∫–∞–∑ #([\d\-]+) (.+?) \((?:–ø–æ—Å—Ç–∞–≤–∫–∞|–¥–æ—Å—Ç–∞–≤–∫–∞) (\d{2}-\d{2}-\d{4})\) –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (.+?) ",
        text
    )
    if order_match:
        return order_match.group(1), order_match.group(2), order_match.group(3), order_match.group(4)
    return None, None, None, None

def get_new_orders_from_gmail():
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ —Å Gmail –∏ –ø–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑—ã"""
    try:
        results = gmail_service.users().messages().list(
            userId='me', labelIds=['INBOX'], q='is:unread'
        ).execute()
        messages = results.get('messages', [])
        orders = []

        for msg in messages:
            msg_data = gmail_service.users().messages().get(userId='me', id=msg['id']).execute()
            subject = ''
            for header in msg_data['payload']['headers']:
                if header['name'] == 'Subject':
                    subject = header['value']

            if '–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!' in subject:
                order_number, supplier, date, obj = parse_order_message(subject)
                if all([order_number, supplier, date, obj]):
                    orders.append((order_number, supplier, date, obj))

            # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            gmail_service.users().messages().modify(
                userId='me', id=msg['id'], body={'removeLabelIds': ['UNREAD']}
            ).execute()
        return orders
    except HttpError as e:
        logging.error(f"Gmail API error: {e}")
        return []

def add_orders_to_utro(orders):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ Utro, –ø—Ä–æ–≤–µ—Ä—è—è #checked"""
    from datetime import datetime
    for order_number, supplier, date, obj in orders:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        utro_sheet.append_row([order_number, supplier, date, obj, "–ù–æ–≤—ã–π", "#checked", now])
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Utro: {order_number}, {supplier}, {date}, {obj}")

# -----------------------------
# Telegram —Ö—ç–Ω–¥–ª–µ—Ä
# -----------------------------
@dp.channel_post()
async def handle_channel_post(message: types.Message):
    if message.chat.username != CHANNEL_ID.replace("@", ""):
        return
    text = message.text or ""
    username = message.chat.title or "<–∫–∞–Ω–∞–ª>"
    main_sheet.append_row([username, text])
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ sheet1: {text}")

# -----------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ sheet1
# -----------------------------
async def check_new_orders():
    while True:
        all_rows = main_sheet.get_all_values()
        for idx, row in enumerate(all_rows[1:], start=2):
            text = row[1] if len(row) > 1 else ""
            checked = row[5] if len(row) > 5 else ""
            if "–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!" in text and checked != "#checked":
                order_number, supplier, date, obj = parse_order_message(text)
                if all([order_number, supplier, date, obj]):
                    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    utro_sheet.append_row([order_number, supplier, date, obj, "–ù–æ–≤—ã–π", "#checked", now])
                    main_sheet.update_cell(idx, 6, "#checked")
                    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–∫–∞–∑ –∏–∑ sheet1: {order_number}, {supplier}, {date}, {obj}")
        await asyncio.sleep(10)

# -----------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ Gmail –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
# -----------------------------
async def check_gmail_loop():
    while True:
        orders = get_new_orders_from_gmail()
        if orders:
            add_orders_to_utro(orders)
        await asyncio.sleep(10)

# -----------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Utro —Ä–∞–∑ –≤ —á–∞—Å
# -----------------------------
async def send_alerts():
    while True:
        all_rows = utro_sheet.get_all_values()
        if len(all_rows) > 1:
            header, *data = all_rows
            one_hour_ago = datetime.now() - timedelta(hours=1)
            new_orders = []
            for row in data:
                if len(row) >= 7:
                    try:
                        ts = datetime.strptime(row[6], "%Y-%m-%d %H:%M:%S")
                        if ts >= one_hour_ago:
                            new_orders.append(row)
                    except:
                        continue
            if new_orders:
                msg_lines = ["üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:"]
                for order in new_orders:
                    msg_lines.append(f"{order[1]} | {order[2]} | {order[3]}")
                await bot.send_message(ALERT_CHANNEL_ID, "\n".join(msg_lines))
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {len(new_orders)} –∑–∞–∫–∞–∑(–æ–≤)")
        await asyncio.sleep(3600)

# -----------------------------
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# -----------------------------
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤, —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ Gmail")
    await asyncio.gather(
        dp.start_polling(),
        check_new_orders(),
        check_gmail_loop(),
        send_alerts()
    )

if __name__ == "__main__":
    asyncio.run(main())
