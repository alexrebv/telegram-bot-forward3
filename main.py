import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERT_CHANNEL_ID = os.getenv("ALERT_CHANNEL_ID")  # @SuppliersODaccept
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# Google Sheets
creds_json = os.getenv("GOOGLE_CREDENTIALS")
creds_dict = json.loads(creds_json)
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(credentials)

# –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
spreadsheet = gc.open_by_key(SPREADSHEET_ID)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç
main_sheet = spreadsheet.sheet1

# –õ–∏—Å—Ç "Utro"
try:
    utro_sheet = spreadsheet.worksheet("Utro")
except gspread.WorksheetNotFound:
    utro_sheet = spreadsheet.add_worksheet(title="Utro", rows="100", cols="10")
    utro_sheet.append_row(["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–î–∞—Ç–∞", "–û–±—ä–µ–∫—Ç", "–°—Ç–∞—Ç—É—Å", "Checked", "–í—Ä–µ–º—è"])

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def parse_order_message(text):
    """–ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!'"""
    import re
    try:
        logging.info(f"–ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç: {text}")
        order_match = re.search(
            r"–ó–∞–∫–∞–∑ #([\d\-]+) (.+?) \((?:–ø–æ—Å—Ç–∞–≤–∫–∞|–¥–æ—Å—Ç–∞–≤–∫–∞) (\d{2}-\d{2}-\d{4})\) –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (.+?) –æ–∂–∏–¥–∞–µ—Ç",
            text,
        )
        if order_match:
            order_number = order_match.group(1)
            supplier = order_match.group(2)
            date = order_match.group(3)
            obj = order_match.group(4)
            logging.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: {order_number}, {supplier}, {date}, {obj}")
            return order_number, supplier, date, obj
        else:
            logging.warning("–†–µ–≥—É–ª—è—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    return None, None, None, None

async def check_new_orders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ sheet1 –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            logging.info("–ß–∏—Ç–∞–µ–º sheet1...")
            all_rows = main_sheet.get_all_values()
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_rows)} —Å—Ç—Ä–æ–∫ –≤ sheet1")

            for idx, row in enumerate(all_rows[1:], start=2):
                text = row[1] if len(row) > 1 else ""
                checked = row[5] if len(row) > 5 else ""

                if "–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!" in text and checked != "#checked":
                    logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {text}")
                    order_number, supplier, date, obj = parse_order_message(text)
                    if all([order_number, supplier, date, obj]):
                        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        utro_sheet.append_row([order_number, supplier, date, obj, "–ù–æ–≤—ã–π", "#checked", now])
                        logging.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ –≤ Utro: {order_number}, {supplier}, {date}, {obj}")
                        main_sheet.update_cell(idx, 6, "#checked")
                        logging.info(f"–°—Ç—Ä–æ–∫–∞ {idx} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ #checked")
                    else:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        await asyncio.sleep(10)

async def send_alerts():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Utro —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        try:
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ Utro –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            all_rows = utro_sheet.get_all_values()

            if len(all_rows) > 1:
                header, *data = all_rows
                one_hour_ago = datetime.now() - timedelta(hours=1)
                new_orders = []
                for row in data:
                    if len(row) >= 7:
                        try:
                            ts = datetime.strptime(row[6], "%Y-%m-%d %H:%M:%S")
                            if ts >= one_hour_ago:
                                new_orders.append(row)
                        except Exception:
                            continue
                if new_orders:
                    msg_lines = ["üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:"]
                    for order in new_orders:
                        msg_lines.append(f"{order[1]} | {order[2]} | {order[3]}")  # –ë–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
                    msg_text = "\n".join(msg_lines)
                    await bot.send_message(ALERT_CHANNEL_ID, msg_text)
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {len(new_orders)} –∑–∞–∫–∞–∑(–æ–≤)")
                else:
                    logging.info("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await asyncio.sleep(3600)

@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ sheet1 (—Ç–æ–ª—å–∫–æ A –∏ B)"""
    if message.chat.username != ALERT_CHANNEL_ID.replace("@", ""):
        return

    username = message.chat.title or "<–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞>"
    text = message.text or "<–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞>"
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {text}")

    main_sheet.append_row([username, text])
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets (A –∏ B)")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
    await asyncio.gather(
        dp.start_polling(),
        check_new_orders(),
        send_alerts()
    )

if __name__ == "__main__":
    asyncio.run(main())
