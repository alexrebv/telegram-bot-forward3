import os
import json
import asyncio
import logging
import re
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
import imaplib
import email

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –∫–∞–Ω–∞–ª –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
ALERT_CHANNEL_ID = os.getenv("ALERT_CHANNEL_ID")  # –∫–∞–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# Gmail
GMAIL_EMAIL = os.getenv("GMAIL_EMAIL")
GMAIL_PASSWORD = os.getenv("GMAIL_PASSWORD")
IMAP_SERVER = "imap.gmail.com"

# Google Sheets
creds_json = os.getenv("GOOGLE_CREDENTIALS")
creds_dict = json.loads(creds_json)
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(credentials)

main_sheet = gc.sheet1
try:
    utro_sheet = gc.worksheet("Utro")
except gspread.WorksheetNotFound:
    utro_sheet = gc.add_worksheet(title="Utro", rows="100", cols="10")
    utro_sheet.append_row(["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–î–∞—Ç–∞", "–û–±—ä–µ–∫—Ç", "–°—Ç–∞—Ç—É—Å", "Checked", "–í—Ä–µ–º—è"])

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------------- Telegram -----------------
@dp.channel_post()
async def handle_channel_post(message: types.Message):
    if message.chat.username != CHANNEL_ID.replace("@", ""):
        return
    text = message.text or "<–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞>"
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {text}")
    main_sheet.append_row([text, "", "", "", "", "", ""])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ A –∏ B
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ sheet1")

# ---------------- –ü–∞—Ä—Å–∏–Ω–≥ -----------------
def parse_order_message(text):
    """–ü–∞—Ä—Å–∏–º '–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!'"""
    try:
        match = re.search(
            r"–ó–∞–∫–∞–∑ #([\d\-]+) (.+?) \((?:–ø–æ—Å—Ç–∞–≤–∫–∞|–¥–æ—Å—Ç–∞–≤–∫–∞) (\d{2}-\d{2}-\d{4})\) –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (.+?) ",
            text
        )
        if match:
            order_number = match.group(1)
            supplier = match.group(2)
            date = match.group(3)
            obj = match.group(4)
            logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {order_number}, {supplier}, {date}, {obj}")
            return order_number, supplier, date, obj
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    return None, None, None, None

async def check_new_orders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ sheet1 –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            all_rows = main_sheet.get_all_values()
            logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ sheet1: {len(all_rows)}")
            for idx, row in enumerate(all_rows[1:], start=2):
                text = row[0] if len(row) > 0 else ""
                checked = row[5] if len(row) > 5 else ""
                if "–ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!" in text and checked != "#checked":
                    order_number, supplier, date, obj = parse_order_message(text)
                    if all([order_number, supplier, date, obj]):
                        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        utro_sheet.append_row([order_number, supplier, date, obj, "–ù–æ–≤—ã–π", "#checked", now])
                        main_sheet.update_cell(idx, 6, "#checked")
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ {order_number} –≤ Utro")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await asyncio.sleep(10)

# ---------------- Gmail -----------------
def fetch_new_gmail_messages():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º, –≥–¥–µ –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"""
    messages = []
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(GMAIL_EMAIL, GMAIL_PASSWORD)
        mail.select("inbox")
        status, data = mail.search(None, '(UNSEEN SUBJECT "–ó–∞–∫–∞–∑ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")')
        if status != "OK":
            return messages
        for num in data[0].split():
            status, msg_data = mail.fetch(num, "(RFC822)")
            if status != "OK":
                continue
            msg = email.message_from_bytes(msg_data[0][1])
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        messages.append(part.get_payload(decode=True).decode())
            else:
                messages.append(msg.get_payload(decode=True).decode())
            # –æ—Ç–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            mail.store(num, '+FLAGS', '\\Seen')
        mail.logout()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Gmail: {e}")
    return messages

async def process_gmail_orders():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Gmail –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            messages = fetch_new_gmail_messages()
            for text in messages:
                match = re.search(
                    r"–ó–∞–∫–∞–∑ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (.+?) #([\d\-]+) —Å–æ–∑–¥–∞–Ω",
                    text
                )
                if match:
                    obj = match.group(1)
                    order_number = match.group(2)
                    all_rows = utro_sheet.get_all_values()
                    for idx, row in enumerate(all_rows[1:], start=2):
                        if len(row) >= 4 and row[0] == order_number and row[3] == obj:
                            utro_sheet.update_cell(idx, 5, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω")
                            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑ {order_number} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Gmail –∑–∞–∫–∞–∑–æ–≤: {e}")
        await asyncio.sleep(30)

# ---------------- –û–ø–æ–≤–µ—â–µ–Ω–∏—è -----------------
async def send_alerts():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        try:
            all_rows = utro_sheet.get_all_values()
            if len(all_rows) > 1:
                header, *data = all_rows
                one_hour_ago = datetime.now() - timedelta(hours=1)
                new_orders = []
                for row in data:
                    if len(row) >= 7:
                        try:
                            ts = datetime.strptime(row[6], "%Y-%m-%d %H:%M:%S")
                            if ts >= one_hour_ago:
                                new_orders.append(row)
                        except Exception:
                            continue
                if new_orders:
                    msg_lines = ["üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:"]
                    for order in new_orders:
                        msg_lines.append(f"{order[1]} | {order[2]} | {order[3]}")
                    await bot.send_message(ALERT_CHANNEL_ID, "\n".join(msg_lines))
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {len(new_orders)} –∑–∞–∫–∞–∑(–æ–≤)")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await asyncio.sleep(3600)

# ---------------- Main -----------------
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await asyncio.gather(
        dp.start_polling(bot),
        check_new_orders(),
        process_gmail_orders(),
        send_alerts()
    )

if __name__ == "__main__":
    asyncio.run(main())
